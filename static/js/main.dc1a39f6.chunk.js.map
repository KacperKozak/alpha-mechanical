{"version":3,"sources":["types/types.ts","helpers.ts","objects/models/Items.tsx","types/consts.ts","objects/tileTypeDefinitions.tsx","objects/propTypeDefinitions.tsx","mocks/mapMock.ts","objects/definitions.ts","state/gameReducer.ts","state/gameEpics.ts","state/store.ts","hooks/useGame.tsx","hooks/useKeyboardEvent.tsx","app/DebugView.tsx","app/Environment.tsx","app/GameInstance.tsx","app/App.tsx","index.tsx"],"names":["ObjectTypes","findById","props","id","find","prop","findByXY","objects","xy","filter","tile","x1","y1","x2","y2","samePosition","asArray","item","Array","isArray","arrMerge","a","b","Asset","url","elevation","rotation","castShadow","receiveShadow","gltf","useLoader","GLTFLoader","scene","children","scale","set","clone","object","dispose","position","AnimatieAsset","gltfanimation","mixer","AnimationMixer","animations","forEach","clip","clipAction","play","useFrame","update","UP","RIGHT","DOWN","LEFT","tileTypeDefinitions","Grass","name","getId","uniqueId","canEnter","Component","style","width","height","backgroundColor","Component3d","Ice","enter","who","vector","move","targetId","Rock","Button","push","state","randomProp","sample","p","remove","display","justifyContent","alignItems","fontSize","propTypeDefinitions","Player","margin","borderRadius","TestProp","self","tileDict","0","1","2","3","mapBitmap","propDict","propsBitmap","objectDefinitions","getDefinition","type","def","Error","initialState","queueStared","queue","tiles","flatMap","items","y","map","typeNumber","x","Math","random","zIndex","aIndex","createMap","action","actionCreatorFactory","enqueue","tryNextAction","nextAction","queueEnd","rotate","gameReducer","reducerWithInitialState","case","moveResolver","actions","rotateResolver","obj","target","addActions","abortResults","console","warn","newXY","applyVector","newXYObjects","sort","objDef","event","gameEpics","combineEpics","actions$","state$","pipe","match","value","game","mapTo","first","concat","of","payload","delay","epicMiddleware","createEpicMiddleware","composeEnhancers","composeWithDevTools","rootReducer","combineReducers","store","createStore","applyMiddleware","run","useGame","useSelector","dispatch","useDispatch","isEqual","useKeyboardEvent","key","callback","useEffect","handler","window","addEventListener","removeEventListener","DebugView","left","up","down","right","top","size","opacity","onClick","text","toString","bottom","Label","color","Environment","intensity","Color","shadow-mapSize-Height","shadow-mapSize-width","shadow-camera-far","shadow-bias","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","GameInstance","useThree","gl","orthographic","camera","zoom","fov","onCreated","lookAt","shadowMap","PCFSoftShadowMap","enabled","fallback","attach","args","App","background","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc1a39f6.chunk.js","sourcesContent":["import { GameState } from '../state/gameReducer'\nimport { Action } from 'redux'\n\nexport type XY = [number, number]\nexport type Vector2 = [number, number]\n\nexport enum ObjectTypes {\n    Grass,\n    Ice,\n    Rock,\n    Button,\n    Player,\n    TestProp,\n}\n\nexport interface ObjectInstance {\n    type: ObjectTypes\n    id: string\n    xy: XY\n    rotation: Vector2\n    elevation: number\n    zIndex: number\n    aIndex: number\n}\n\nexport interface ActionEvent {\n    who: ObjectInstance // who triggered this @TODO better name!\n    self: ObjectInstance\n    vector: Vector2\n    state: GameState\n}\n\nexport interface ObjectDefinition {\n    name: string\n    getId(): string\n    canEnter(event: ActionEvent): boolean\n    push?(event: ActionEvent): Action[] // triggered when !canEnter\n    enter?(event: ActionEvent): Action[]\n    leave?(event: ActionEvent): Action[]\n    Component(props: RenderComponentProps): any\n    Component3d(props: RenderComponentProps): any\n}\n\nexport interface RenderComponentProps {\n    xy: XY\n    rotation: Vector2\n    elevation: number\n}\n","import { XY, Vector2 } from './types/types'\n\nexport const reverseVector = (vector: Vector2) => vector.map(v => v * -1) as Vector2\n\nexport const applyVector = ([x, y]: XY, [vx, vy]: Vector2): XY => [x + vx, y + vy]\n\nexport const samePosition = ([x1, y1]: XY, [x2, y2]: XY) => x1 === x2 && y1 === y2\n\nexport const findById = <T extends { id: string }>(props: T[], id: string) => {\n    return props.find(prop => prop.id === id)\n}\n\nexport const findByXY = <T extends { xy: XY }>(objects: T[], xy: XY) => {\n    return objects.filter(tile => samePosition(tile.xy, xy))\n}\n\nexport const asArray = <T>(item: T | T[]): T[] => (Array.isArray(item) ? item : [item])\nexport const arrMerge = <T>(a: T[], b: T | T[] = []): T[] => [...a, ...asArray(b)]\n","import React from 'react'\nimport { useLoader, useFrame } from 'react-three-fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport { RenderComponentProps } from '../../types/types'\nimport { AnimationMixer } from 'three'\nimport { setInterval } from 'timers'\n\nexport const Player = (props: RenderComponentProps) => {\n    return <AnimatieAsset {...props} url=\"robot_model.gltf\" />\n}\n\nexport const Item = (props: RenderComponentProps) => {\n    return <Asset {...props} url=\"rock1.gltf\" />\n}\n\nexport const Ground = (props: RenderComponentProps) => {\n    return (\n        <Asset\n            {...props}\n            url=\"ground_002_export_test_1_cube.gltf\"\n            castShadow={false}\n            receiveShadow={true}\n        />\n    )\n}\n\nexport const Grass = (props: RenderComponentProps) => {\n    return (\n        <Asset\n            {...props}\n            url=\"grass_002_export_test_1_cube.gltf\" // INNY model\n            castShadow={false}\n            receiveShadow={true}\n        />\n    )\n}\n\nexport const Ice = (props: RenderComponentProps) => {\n    return (\n        <Asset\n            {...props}\n            url=\"ice_002_export_test_1_cube.gltf\" // INNY model\n            castShadow={false}\n            receiveShadow={true}\n        />\n    )\n}\nexport const Button = (props: RenderComponentProps) => {\n    return (\n        <Asset\n            {...props}\n            url=\"ground_002_export_test_1_cube.gltf\" // INNY model\n            castShadow={false}\n            receiveShadow={true}\n        />\n    )\n}\n\ninterface AssetProps extends RenderComponentProps {\n    url: string\n    color?: string\n    castShadow?: boolean\n    receiveShadow?: boolean\n}\n\nconst Asset = ({\n    url,\n    xy,\n    elevation,\n    rotation,\n    castShadow = true,\n    receiveShadow = true,\n}: AssetProps) => {\n    const gltf = useLoader(GLTFLoader, `/assets/${url}`)\n    if (castShadow) gltf.scene.children[0].castShadow = true\n    if (receiveShadow) gltf.scene.children[0].receiveShadow = true\n    gltf.scene.scale.set(0.5, 0.5, 0.5)\n    gltf.scene = gltf.scene.clone()\n    return (\n        <primitive\n            object={gltf.scene}\n            dispose={null}\n            position={[xy[0], elevation, xy[1]]}\n            rotation={[0, 0, 0]}\n        />\n    )\n}\n\nconst AnimatieAsset = ({\n    url,\n    xy,\n    elevation,\n    rotation,\n    castShadow = true,\n    receiveShadow = true,\n}: AssetProps) => {\n    const gltf = useLoader(GLTFLoader, `/assets/${url}`)\n    // const gltfanimation = useLoader(GLTFLoader, `/assets/animations/jump.gltf`)\n    // const gltfanimation = useLoader(GLTFLoader, `/assets/animations/move.gltf`)\n    const gltfanimation = useLoader(GLTFLoader, `/assets/animations/boring.gltf`)\n    if (castShadow) gltf.scene.children[0].castShadow = true\n    if (receiveShadow) gltf.scene.children[0].receiveShadow = true\n    gltf.scene.scale.set(0.5, 0.5, 0.5)\n    gltf.scene = gltf.scene.clone()\n    const mixer = new AnimationMixer(gltfanimation.scene)\n    gltfanimation.animations.forEach(clip => {\n        // console.log(clip, mixer)\n        mixer.clipAction(clip, gltf.scene.children[0]).play()\n        // mixer.setTime(0.5)\n    })\n\n    useFrame(() => {\n        // console.log(mixer)\n        mixer.update(0.02)\n        // mixer.time = 5\n    })\n    // useFrame(() => (mixer.existingAction))\n\n    return (\n        <primitive\n            object={gltf.scene}\n            dispose={null}\n            position={[xy[0], elevation, xy[1]]}\n            rotation={[0, 0, 0]}\n        />\n    )\n}\n// export const box = (props: RenderComponentProps) => {\n//     return (\n//         <mesh>\n//             <boxBufferGeometry attach=\"geometry\" args={[0.5, 0.5, 0.5]} />\n//             <meshStandardMaterial attach=\"material\" color={props.color} />\n//         </mesh>\n//     )\n// }\n","import { Vector2 } from './types'\n\nexport const PLAYER_ID = 'player'\n\nexport const UP: Vector2 = [0, -1]\nexport const RIGHT: Vector2 = [1, 0]\nexport const DOWN: Vector2 = [0, 1]\nexport const LEFT: Vector2 = [-1, 0]\n","import { uniqueId, sample } from 'lodash'\nimport React from 'react'\nimport { ObjectDefinition, ObjectTypes } from '../types/types'\nimport { Button, Grass, Ground, Ice } from './models/Items'\nimport { remove, move } from '../state/gameReducer'\nimport { PLAYER_ID } from '../types/consts'\n\nexport const tileTypeDefinitions: Partial<Record<ObjectTypes, ObjectDefinition>> = {\n    [ObjectTypes.Grass]: {\n        name: 'Grass',\n        getId: () => uniqueId('grass'),\n        canEnter: () => true,\n        Component: () => <div style={{ width: 50, height: 50, backgroundColor: 'green' }} />,\n        Component3d: Grass,\n    },\n\n    [ObjectTypes.Ice]: {\n        name: 'Ice',\n        getId: () => uniqueId('ice'),\n        canEnter: () => true,\n        enter: ({ who, vector }) => [move({ targetId: who.id, vector })],\n        Component: () => <div style={{ width: 50, height: 50, backgroundColor: 'lightblue' }} />,\n        Component3d: Ice,\n    },\n\n    [ObjectTypes.Rock]: {\n        name: 'Rock',\n        getId: () => uniqueId('rock'),\n        canEnter: () => false,\n        Component: () => <div style={{ width: 50, height: 50, backgroundColor: 'gray' }} />,\n        Component3d: Ground,\n    },\n\n    [ObjectTypes.Button]: {\n        name: 'Button',\n        getId: () => uniqueId('button'),\n        canEnter: () => false,\n        push: ({ state }) => {\n            const randomProp = sample(state.objects.filter(p => p.id !== PLAYER_ID))\n            if (!randomProp) return []\n            return [remove(randomProp.id)]\n        },\n        Component: () => (\n            <div\n                style={{\n                    width: 50,\n                    height: 50,\n                    backgroundColor: 'gray',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                }}\n            >\n                <button style={{ fontSize: 10 }}>btn</button>\n            </div>\n        ),\n        Component3d: Button,\n    },\n}\n","import { uniqueId } from 'lodash'\nimport React from 'react'\nimport { PLAYER_ID } from '../types/consts'\nimport { ObjectDefinition, ObjectTypes } from '../types/types'\nimport { Item, Player } from './models/Items'\nimport { remove } from '../state/gameReducer'\n\nexport const propTypeDefinitions: Partial<Record<ObjectTypes, ObjectDefinition>> = {\n    [ObjectTypes.Player]: {\n        name: 'Player',\n        getId: () => PLAYER_ID,\n        canEnter: () => true,\n        Component: () => (\n            <div\n                style={{\n                    margin: 25 / 2,\n                    width: 25,\n                    height: 25,\n                    backgroundColor: 'white',\n                    borderRadius: 5,\n                }}\n            />\n        ),\n        Component3d: Player,\n    },\n    [ObjectTypes.TestProp]: {\n        name: 'TestProp',\n        getId: () => uniqueId('test-prop'),\n        canEnter: () => true,\n        enter: ({ self }) => [remove(self.id)],\n        Component: () => (\n            <div\n                style={{\n                    margin: 25 / 2,\n                    width: 25,\n                    height: 25,\n                    backgroundColor: 'brown',\n                    borderRadius: 5,\n                }}\n            />\n        ),\n        Component3d: Item,\n    },\n}\n","import { tileTypeDefinitions } from '../objects/tileTypeDefinitions'\nimport { propTypeDefinitions } from '../objects/propTypeDefinitions'\nimport { ObjectInstance, ObjectTypes } from '../types/types'\nimport { findByXY } from '../helpers'\n\nconst tileDict = {\n    0: ObjectTypes.Grass,\n    1: ObjectTypes.Rock,\n    2: ObjectTypes.Button,\n    3: ObjectTypes.Ice,\n}\n\n// prettier-ignore\nconst mapBitmap = [\n    [1,1,1,1,2,1,1,],\n    [1,0,3,3,0,0,1,],\n    [1,0,0,1,1,0,1,],\n    [1,0,0,1,0,0,1,],\n    [1,1,1,1,1,1,1,],\n]\n\nconst propDict = {\n    1: ObjectTypes.Player,\n    2: ObjectTypes.TestProp,\n}\n\n// prettier-ignore\nconst propsBitmap = [\n    [0,0,0,0,0,0,0,],\n    [0,1,0,0,0,0,0,],\n    [0,0,0,0,0,0,0,],\n    [0,2,0,0,2,0,2,],\n    [0,0,0,0,0,0,0,],\n]\n\n// TODO?\nconst randomRotation = () => {\n    return (Math.PI / 2) * Math.round(Math.random() * 4)\n}\n\nexport const createMap = (): ObjectInstance[] => {\n    const tiles: ObjectInstance[] = mapBitmap.flatMap((items, y) =>\n        items.map((typeNumber, x) => {\n            const type = tileDict[typeNumber as keyof typeof tileDict]\n            return {\n                type,\n                xy: [x, y],\n                id: tileTypeDefinitions[type]!.getId(),\n                elevation: Math.random() / 7,\n                rotation: [0, 0],\n                zIndex: 1,\n                aIndex: 100,\n            }\n        }),\n    )\n\n    const props = propsBitmap\n        .flatMap((items, y) =>\n            items.map((typeNumber, x) => {\n                const type = propDict[typeNumber as keyof typeof propDict]\n                if (!type) return\n                return {\n                    type,\n                    xy: [x, y],\n                    id: propTypeDefinitions[type]!.getId(),\n                    elevation: findByXY(tiles, [x, y])[0]?.elevation || 0,\n                    rotation: [0, 0],\n                    zIndex: 2,\n                    aIndex: 10,\n                }\n            }),\n        )\n        .filter(a => a) as ObjectInstance[]\n\n    return [...props, ...tiles]\n}\n","import { ObjectDefinition, ObjectTypes } from '../types/types'\nimport { tileTypeDefinitions } from './tileTypeDefinitions'\nimport { propTypeDefinitions } from './propTypeDefinitions'\n\nconst objectDefinitions: Partial<Record<ObjectTypes, ObjectDefinition>> = {\n    ...tileTypeDefinitions,\n    ...propTypeDefinitions,\n}\n\nexport const getDefinition = (type: ObjectTypes): ObjectDefinition => {\n    const def = objectDefinitions[type]\n\n    if (!def) throw new Error(`[getDefinition] Definition for ${type} not found`)\n\n    return def\n}\n","import actionCreatorFactory from 'typescript-fsa'\nimport { reducerWithInitialState } from 'typescript-fsa-reducers'\nimport { applyVector, asArray, findById, findByXY, arrMerge } from '../helpers'\nimport { createMap } from '../mocks/mapMock'\nimport { Vector2, ObjectInstance, ActionEvent } from '../types/types'\nimport { Action } from 'redux'\nimport { getDefinition } from '../objects/definitions'\n\nexport interface GameState {\n    queueStared: boolean\n    queue: Action[]\n    objects: ObjectInstance[]\n}\n\nexport interface GameStateAware {\n    game: GameState\n}\n\nexport const initialState: GameState = {\n    queueStared: false,\n    queue: [],\n    objects: createMap(),\n}\n\nconst action = actionCreatorFactory('GAME')\n\nexport const enqueue = action<Action | Action[]>('ENQUEUE')\nexport const tryNextAction = action('TRY_NEXT_ACTION')\nexport const nextAction = action<Action>('NEXT_ACTION')\nexport const queueEnd = action('QUEUE_END')\n\nexport const move = action<{ targetId: string; vector: Vector2 }>('MOVE')\nexport const rotate = action<{ targetId: string; rotation: Vector2 }>('ROTATE')\nexport const remove = action<string>('REMOVE')\n\nexport const gameReducer = reducerWithInitialState(initialState)\n    .case(\n        enqueue,\n        (state, action): GameState => ({\n            ...state,\n            queue: arrMerge(state.queue, action),\n        }),\n    )\n    .case(\n        nextAction,\n        (state, action): GameState => ({\n            ...state,\n            queueStared: true,\n            queue: state.queue.filter(a => a !== action),\n        }),\n    )\n    .case(queueEnd, (state): GameState => ({ ...state, queueStared: false }))\n    .case(\n        move,\n        (state, { targetId, vector }): GameState => {\n            const { actions, objects } = moveResolver(state, targetId, vector)\n            return { ...state, queue: arrMerge(state.queue, actions), objects }\n        },\n    )\n    .case(\n        rotate,\n        (state, { targetId, rotation }): GameState => {\n            const { actions, objects } = rotateResolver(state, targetId, rotation)\n            return { ...state, queue: arrMerge(state.queue, actions), objects }\n        },\n    )\n    .case(\n        remove,\n        (state, targetId): GameState => ({\n            ...state,\n            objects: state.objects.filter(obj => obj.id !== targetId),\n        }),\n    )\n\ninterface ResolverResults {\n    objects: ObjectInstance[]\n    actions: Action[]\n}\n\nconst rotateResolver = (\n    { objects }: GameState,\n    targetId: string,\n    rotation: Vector2,\n): ResolverResults => {\n    const target = findById(objects, targetId)\n\n    return {\n        objects: objects.map(obj => {\n            if (obj !== target) return obj\n            return { ...obj, rotation }\n        }),\n        actions: [],\n    }\n}\n\nconst moveResolver = (state: GameState, targetId: string, vector: Vector2): ResolverResults => {\n    let objects = state.objects\n    const actions: Action[] = []\n    const addActions = (a: Action | Action[] = []) => actions.push(...asArray(a))\n    const abortResults = { objects, actions }\n\n    const target = findById(objects, targetId)\n\n    if (!target) {\n        console.warn(`[move] Target ${targetId} not found`)\n        return abortResults\n    }\n\n    const newXY = applyVector(target.xy, vector)\n    const newXYObjects = findByXY(objects, newXY).sort((a, b) => b.aIndex - a.aIndex)\n\n    // Can enter to this region?\n    for (const obj of newXYObjects) {\n        const objDef = getDefinition(obj.type)\n        const event: ActionEvent = { who: target, vector, state, self: obj }\n        if (!objDef.canEnter(event)) {\n            addActions(objDef.push?.(event))\n            return { objects, actions }\n        }\n    }\n\n    // Post enter events\n    for (const obj of newXYObjects) {\n        const objDef = getDefinition(obj.type)\n        const event: ActionEvent = { who: target, vector, state, self: obj }\n        addActions(objDef.enter?.(event))\n    }\n\n    objects = objects.map(obj => {\n        if (obj !== target) return obj\n        return { ...obj, xy: newXY }\n    })\n\n    return { objects, actions }\n}\n","import { Action } from 'redux'\nimport { combineEpics, StateObservable } from 'redux-observable'\nimport { concat, from, Observable, of, Subject } from 'rxjs'\nimport {\n    concatMap,\n    delay,\n    distinctUntilChanged,\n    filter,\n    ignoreElements,\n    map,\n    mapTo,\n    startWith,\n    switchMap,\n    switchMapTo,\n    flatMap,\n} from 'rxjs/operators'\nimport { enqueue, GameStateAware, nextAction, tryNextAction, queueEnd } from './gameReducer'\nimport { first } from 'lodash'\n\nconst enqueueEpic = (\n    actions$: Observable<Action>,\n    state$: StateObservable<GameStateAware>,\n): Observable<Action> =>\n    actions$.pipe(\n        filter(enqueue.match),\n        filter(() => !state$.value.game.queueStared),\n        mapTo(tryNextAction()),\n    )\n\nconst tryNextEpic = (\n    actions$: Observable<Action>,\n    state$: StateObservable<GameStateAware>,\n): Observable<Action> =>\n    actions$.pipe(\n        filter(tryNextAction.match),\n        map(() => first(state$.value.game.queue)),\n        map(action => (action ? nextAction(action) : queueEnd())),\n    )\n\nconst nextActionEpic = (\n    actions$: Observable<Action>,\n    state$: StateObservable<GameStateAware>,\n): Observable<Action> =>\n    actions$.pipe(\n        filter(nextAction.match),\n        flatMap(action => concat(of(action.payload), of(tryNextAction()).pipe(delay(150)))),\n    )\n\nexport const gameEpics = combineEpics(enqueueEpic, tryNextEpic, nextActionEpic)\n","import { applyMiddleware, combineReducers, createStore } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { createEpicMiddleware } from 'redux-observable'\nimport { gameReducer } from './gameReducer'\nimport { gameEpics } from './gameEpics'\n\nconst epicMiddleware = createEpicMiddleware()\n\nconst composeEnhancers = composeWithDevTools({\n    name: 'App',\n})\n\nconst rootReducer = combineReducers({\n    game: gameReducer,\n})\n\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(epicMiddleware)))\n\nepicMiddleware.run(gameEpics as any)\n","import { useDispatch, useSelector } from 'react-redux'\nimport { applyVector, findById, findByXY } from '../helpers'\nimport { GameStateAware, move, enqueue, rotate } from '../state/gameReducer'\nimport { Vector2 } from '../types/types'\nimport { isEqual } from 'lodash'\nimport { Action } from 'redux'\n\nexport const useGame = () => {\n    const state = useSelector((state: GameStateAware) => state.game)\n    const dispatch = useDispatch()\n\n    const triggerMove = (targetId: string, vector: Vector2) => {\n        if (state.queueStared) return\n\n        const actions: Action[] = []\n        const who = findById(state.objects, targetId)\n\n        if (!who) {\n            return console.warn(`Unknown target ${targetId}`)\n        }\n\n        if (!isEqual(who.rotation, vector)) {\n            actions.push(rotate({ targetId, rotation: vector }))\n        } else {\n            actions.push(move({ targetId, vector }))\n        }\n\n        dispatch(enqueue(actions))\n    }\n\n    return { ...state, move: triggerMove }\n}\n","import { useEffect } from 'react'\n\nexport const useKeyboardEvent = (key: string, callback: Function) => {\n    useEffect(() => {\n        const handler = (event: KeyboardEvent) => {\n            if (event.key === key) callback()\n        }\n\n        window.addEventListener('keydown', handler)\n\n        return () => window.removeEventListener('keydown', handler)\n    })\n}\n","import React from 'react'\nimport { useGame } from '../hooks/useGame'\nimport { useKeyboardEvent } from '../hooks/useKeyboardEvent'\nimport { getDefinition } from '../objects/definitions'\nimport { DOWN, LEFT, PLAYER_ID, RIGHT, UP } from '../types/consts'\nimport { ObjectInstance, ObjectTypes } from '../types/types'\n\ninterface DebugViewProps {\n    objects: ObjectInstance[]\n}\n\nconst size = 50\n\nexport const DebugView = ({ objects }: DebugViewProps) => {\n    const { move } = useGame()\n\n    const left = () => move(PLAYER_ID, LEFT)\n    const up = () => move(PLAYER_ID, UP)\n    const down = () => move(PLAYER_ID, DOWN)\n    const right = () => move(PLAYER_ID, RIGHT)\n\n    useKeyboardEvent('ArrowLeft', left)\n    useKeyboardEvent('ArrowUp', up)\n    useKeyboardEvent('ArrowDown', down)\n    useKeyboardEvent('ArrowRight', right)\n\n    return (\n        <div\n            style={{\n                position: 'absolute',\n                zIndex: 100,\n                top: 0,\n                right: 0,\n                width: size * 8,\n                opacity: 0.8,\n            }}\n        >\n            <button onClick={left}>←</button>\n            <button onClick={up}>↑</button>\n            <button onClick={down}>↓</button>\n            <button onClick={right}>→</button>\n\n            <div style={{ position: 'relative' }}>\n                {objects.map(({ type, id, xy, rotation, elevation, zIndex }) => {\n                    const { Component } = getDefinition(type)\n                    return (\n                        <div\n                            key={id}\n                            style={{\n                                position: 'absolute',\n                                left: xy[0] * size,\n                                top: xy[1] * size,\n                                width: size,\n                                height: size,\n                                zIndex,\n                            }}\n                        >\n                            <Label text={id + rotation.toString()} />\n                            {type === ObjectTypes.Player && (\n                                <Label text={rotation.toString()} bottom />\n                            )}\n                            <Component xy={xy} rotation={rotation} elevation={elevation} />\n                        </div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\ninterface LabelProps {\n    text: string\n    bottom?: boolean\n}\n\nexport const Label = ({ text, bottom }: LabelProps) => (\n    <div\n        style={{\n            position: 'absolute',\n            left: 0,\n            top: bottom ? '80%' : 0,\n            fontSize: 10,\n            color: 'black',\n        }}\n    >\n        {text}\n    </div>\n)\n","import React from 'react'\nimport { Color } from 'three'\n\nconst d = 5\n\nexport const Environment = () => {\n    return (\n        <group>\n            <ambientLight intensity={2} />\n            <pointLight\n                position={[6, 7, 8]}\n                intensity={2.2}\n                color={new Color('#3a8dc2')}\n                shadow-mapSize-Height=\"1024\"\n                shadow-mapSize-width=\"1024\"\n                shadow-camera-far={30}\n                shadow-bias={-0.01}\n                castShadow\n                shadow-camera-left={-d}\n                shadow-camera-right={d}\n                shadow-camera-top={d}\n                shadow-camera-bottom={-d}\n            />\n            <pointLight\n                position={[1, 3, 5]}\n                intensity={2.2}\n                color={new Color('#c86b6f')}\n                shadow-mapSize-Height=\"1024\"\n                shadow-mapSize-width=\"1024\"\n                shadow-camera-far={30}\n                shadow-bias={-0.01}\n                castShadow\n                shadow-camera-left={-d}\n                shadow-camera-right={d}\n                shadow-camera-top={d}\n                shadow-camera-bottom={-d}\n            />\n        </group>\n    )\n}\n","import React, { Suspense } from 'react'\nimport { Canvas, useThree } from 'react-three-fiber'\nimport { Color, PCFSoftShadowMap } from 'three'\nimport { useGame } from '../hooks/useGame'\nimport { getDefinition } from '../objects/definitions'\nimport { DebugView } from './DebugView'\nimport { play } from '../audio/play'\nimport { Environment } from './Environment'\n\nexport const GameInstance = () => {\n    const { objects } = useGame()\n    const { gl } = useThree()\n\n    return (\n        <>\n            <DebugView objects={objects} />\n            <Canvas\n                orthographic\n                camera={{ zoom: 100, fov: 1075, position: [-3 + 3, 5, 5 + 2] }}\n                onCreated={scene => {\n                    scene.camera.lookAt(3, 1, 2)\n                    scene.gl.shadowMap.type = PCFSoftShadowMap\n                    scene.gl.shadowMap.enabled = true\n                }}\n            >\n                <Environment />\n                <Suspense\n                    fallback={\n                        <mesh>\n                            <boxBufferGeometry attach=\"geometry\" args={[0.5, 0.5, 0.5]} />\n                            <meshStandardMaterial attach=\"material\" color=\"red\" />\n                        </mesh>\n                    }\n                >\n                    {objects.map(({ type, id, xy, elevation, rotation }) => {\n                        const { Component3d } = getDefinition(type)\n                        return (\n                            <Component3d\n                                xy={xy}\n                                rotation={rotation}\n                                elevation={elevation}\n                                key={id}\n                            />\n                        )\n                    })}\n                </Suspense>\n            </Canvas>\n        </>\n    )\n}\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { store } from '../state/store'\nimport { GameInstance } from './GameInstance'\n\nexport const App = () => {\n    return (\n        <Provider store={store}>\n            <div>\n                <h1\n                    style={{\n                        position: 'fixed',\n                        top: 0,\n                        left: 0,\n                        right: 0,\n                        width: '300px',\n                        background: 'rgba(0,0,0,0.2)',\n                        margin: '0 auto',\n                        borderRadius: '0 0 15px 15px',\n                    }}\n                >\n                    alpha-mechanical\n                </h1>\n                <GameInstance />\n            </div>\n        </Provider>\n    )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './app/App'\nimport './styles/global.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}